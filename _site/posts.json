{
  "version": "https://jsonfeed.org/version/1",
  "title": null,
  "home_page_url": "/",
  "feed_url": "/feed.json",
  "description": null,
  "favicon": "/assets/icons/favicon-96x96.png",
  "icon": "/assets/icons/apple-touch-icon.png",
  "author": {
      "name": null,
      "url": "/",
  },
  "expired": "false",
  "items": [

    {
      "id": "/functional/programming/scala/2018/09/15/understanding-functor-via-cats-in-scala",
      "url": "/functional/programming/scala/2018/09/15/understanding-functor-via-cats-in-scala.html?utm_source=jsonFeed&amp;utm_medium=jsonFeed&amp;utm_campaign=Understandingfunctorviacatsinscala",
      "title": "Understanding functor via cats in scala",
      "content_html": "<p>Hi,</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">package</span> <span class=\"nn\">com.scalamill.meow.functor</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">cats.Functor</span>\n<span class=\"k\">import</span> <span class=\"nn\">cats.instances.list._</span>\n<span class=\"k\">import</span> <span class=\"nn\">cats.instances.option._</span>\n\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">BankAccount</span><span class=\"o\">[</span><span class=\"kt\">T</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">AccountType</span><span class=\"o\">](</span><span class=\"n\">accountType</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">,</span> <span class=\"n\">balance</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">status</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n\n<span class=\"k\">abstract</span> <span class=\"k\">class</span> <span class=\"nc\">AccountType</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SavingsAccount</span> <span class=\"k\">extends</span> <span class=\"nc\">AccountType</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SalaryAccount</span> <span class=\"k\">extends</span> <span class=\"nc\">AccountType</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CurrentAccount</span> <span class=\"k\">extends</span> <span class=\"nc\">AccountType</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SomeOtherAccount</span> <span class=\"k\">extends</span> <span class=\"nc\">AccountType</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">BankAccountFunctor</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">map</span><span class=\"o\">[</span><span class=\"kt\">A</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">AccountType</span>, <span class=\"kt\">B</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">AccountType</span><span class=\"o\">](</span><span class=\"n\">fa</span><span class=\"k\">:</span> <span class=\"kt\">BankAccount</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">BankAccount</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">fa</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">accountType</span> <span class=\"k\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">fa</span><span class=\"o\">.</span><span class=\"n\">accountType</span><span class=\"o\">))</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">FunctorExample</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">option</span> <span class=\"k\">=</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">list</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">listOption</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"nc\">Option</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"nc\">Option</span><span class=\"o\">(</span><span class=\"s\">\"34\"</span><span class=\"o\">),</span> <span class=\"nc\">Option</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">))</span>\n\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"nc\">Functor</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">].</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">option</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"nc\">Functor</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">].</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"nc\">Functor</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">].</span><span class=\"n\">compose</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">].</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">listOption</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"s\">\"\"</span><span class=\"o\">))</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">bankAccount1</span> <span class=\"k\">=</span> <span class=\"nc\">BankAccount</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">SalaryAccount</span><span class=\"o\">,</span> <span class=\"mi\">15000</span><span class=\"o\">,</span><span class=\"s\">\"Running\"</span><span class=\"o\">)</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">bankAccount2</span> <span class=\"k\">=</span> <span class=\"nc\">BankAccount</span><span class=\"o\">[</span><span class=\"kt\">AccountType</span><span class=\"o\">](</span><span class=\"k\">new</span> <span class=\"nc\">CurrentAccount</span><span class=\"o\">,</span> <span class=\"mi\">4000</span> <span class=\"o\">,</span> <span class=\"s\">\"Running\"</span><span class=\"o\">)</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">bankAccount3</span> <span class=\"k\">=</span> <span class=\"nc\">BankAccount</span><span class=\"o\">[</span><span class=\"kt\">AccountType</span><span class=\"o\">](</span><span class=\"k\">new</span> <span class=\"nc\">SalaryAccount</span><span class=\"o\">,</span> <span class=\"mi\">60000</span><span class=\"o\">,</span> <span class=\"s\">\"Running\"</span><span class=\"o\">)</span>\n\n  <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">l</span> <span class=\"k\">=</span> <span class=\"nc\">BankAccountFunctor</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">list2</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"n\">bankAccount1</span><span class=\"o\">,</span> <span class=\"n\">bankAccount2</span><span class=\"o\">,</span> <span class=\"n\">bankAccount3</span><span class=\"o\">)</span>\n\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"nc\">BankAccountFunctor</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">bankAccount1</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">SalaryAccount</span><span class=\"o\">))</span>\n\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"k\">for</span> <span class=\"o\">{</span>\n    <span class=\"n\">bankAccount</span> <span class=\"k\">&lt;-</span> <span class=\"n\">list2</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bankAccount</span><span class=\"o\">.</span><span class=\"n\">balance</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5000</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span> <span class=\"k\">yield</span> <span class=\"nc\">BankAccountFunctor</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">bankAccount</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">SavingsAccount</span><span class=\"o\">).</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">balance</span> <span class=\"k\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">status</span> <span class=\"k\">=</span>  <span class=\"s\">\"closed\"</span><span class=\"o\">))</span>\n\n\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"k\">for</span> <span class=\"o\">{</span>\n    <span class=\"n\">bankAccount</span> <span class=\"k\">&lt;-</span> <span class=\"n\">list2</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bankAccount</span><span class=\"o\">.</span><span class=\"n\">balance</span> <span class=\"o\">&lt;</span> <span class=\"mi\">20000</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">bankAccount</span><span class=\"o\">.</span><span class=\"n\">balance</span> <span class=\"o\">&gt;</span> <span class=\"mi\">4000</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span> <span class=\"k\">yield</span> <span class=\"nc\">BankAccountFunctor</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">bankAccount</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">SavingsAccount</span><span class=\"o\">).</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">balance</span> <span class=\"k\">=</span> <span class=\"n\">bankAccount</span><span class=\"o\">.</span><span class=\"n\">balance</span> <span class=\"o\">-</span> <span class=\"mi\">1000</span><span class=\"o\">))</span>\n\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"k\">for</span> <span class=\"o\">{</span>\n    <span class=\"n\">bankAccount</span> <span class=\"k\">&lt;-</span> <span class=\"n\">list2</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bankAccount</span><span class=\"o\">.</span><span class=\"n\">balance</span> <span class=\"o\">&gt;</span> <span class=\"mi\">50000</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span> <span class=\"k\">yield</span> <span class=\"nc\">BankAccountFunctor</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">bankAccount</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">CurrentAccount</span><span class=\"o\">).</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">balance</span> <span class=\"k\">=</span> <span class=\"n\">bankAccount</span><span class=\"o\">.</span><span class=\"n\">balance</span> <span class=\"o\">+</span> <span class=\"mi\">5000</span><span class=\"o\">))</span>\n\n\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">list2</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">BankAccountFunctor</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">CurrentAccount</span><span class=\"o\">)))</span>\n\n\n<span class=\"o\">}</span></code></pre></figure>\n\n",
      
      "tags":  [ "scala,","cats,","functor" ],
      
      "date_published": "2018-09-15T22:05:47+05:30",
      "date_modified": "2018-09-15T22:05:47+05:30"
    },

    {
      "id": "/functional/programming/scala/2018/09/15/understanding-semigroup-via-cats-in-scala",
      "url": "/functional/programming/scala/2018/09/15/understanding-semigroup-via-cats-in-scala.html?utm_source=jsonFeed&amp;utm_medium=jsonFeed&amp;utm_campaign=UnderstandingSemigroupviaCatsinScala",
      "title": "Understanding Semigroup via Cats in Scala",
      "content_html": "<p>Hi All, Scala now is a most widely used language for enterprises and if you are Scala Programmer then you are also using it in your daily life. Ever wondered how Scala library collections share the same algebra. We can use map, flatMap, reduceLeft, foldLeft functions for any kind of the collection if we know how a particular algebraic datatype in that collection behaves. We will understand these things via Cats.</p>\n\n<p><strong>What is Cats.</strong></p>\n\n<p>Cats is the library written in Scala to teach you the functional design patterns in a functional programming. Cats not only provides a solid understanding of Monad, Monoid, Functor, Applicative functor in category theory but also let’s you create abstractions for your datatypes .</p>\n\n<p>Add Cats to your sbt project</p>\n\n<p>libraryDependencies += “org.typelevel” %% “cats-core” % “1.2.0”\nThere are various datatype is cats and we will explore one of them in this post.</p>\n\n<p><strong>SemiGroup</strong></p>\n\n<p>Semigroup is a discrete mathematics concept(Wikipedia In mathematics, a semigroup is an algebraic structure consisting of a set together with an associative binary operation. ). Coming to functional programming a Semigroup over a datatype is defined as a single associative operation which takes two values of same type and return you the same datatype.</p>\n\n<p>To work with cats we need to import basic imports as below.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">import</span> <span class=\"nn\">cats.Semigroup</span>\n<span class=\"k\">import</span> <span class=\"nn\">cats.implicits._</span></code></pre></figure>\n\n<p>A semigroup over some datatypes is already inbuilt and they can be used as below.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">val</span> <span class=\"n\">intSemiGroup</span> <span class=\"k\">=</span> <span class=\"nc\">Semigroup</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span>\n<span class=\"k\">val</span> <span class=\"n\">stringSemiGroup</span> <span class=\"k\">=</span> <span class=\"nc\">Semigroup</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span>\n<span class=\"k\">val</span> <span class=\"n\">listSemiGroup</span> <span class=\"k\">=</span> <span class=\"nc\">Semigroup</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]</span>\n\n<span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">intSemiGroup</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">stringSemiGroup</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"s\">\"Hello\"</span><span class=\"o\">,</span> <span class=\"s\">\" World\"</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"s\">\"Hello World\"</span><span class=\"o\">)</span>\n<span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">listSemiGroup</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">))</span> <span class=\"o\">==</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">))</span></code></pre></figure>\n\n<p>Let’s Understand Semigroup by building a Banking Transaction App.Create a TransactionType Enum to differentiate between Credit and debit transaction.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"> <span class=\"k\">object</span> <span class=\"nc\">TransactionType</span> <span class=\"k\">extends</span> <span class=\"nc\">Enumeration</span> <span class=\"o\">{</span>\n    <span class=\"k\">type</span> <span class=\"kt\">TRANSXN</span> <span class=\"o\">=</span> <span class=\"nc\">Value</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Credit</span> <span class=\"k\">=</span> <span class=\"nc\">Value</span><span class=\"o\">(</span><span class=\"s\">\"Credit\"</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Debit</span> <span class=\"k\">=</span> <span class=\"nc\">Value</span><span class=\"o\">(</span><span class=\"s\">\"Debit\"</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span></code></pre></figure>\n\n<p>Define a transaction as a case class.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"n\">transactionType</span><span class=\"k\">:</span> <span class=\"kt\">TransactionType.TRANSXN</span><span class=\"o\">,</span> <span class=\"n\">amount</span><span class=\"k\">:</span> <span class=\"kt\">Double</span><span class=\"o\">)</span></code></pre></figure>\n\n<p>Now we can define different semigroup as per the requirement. Like we need total amount credited in the person account.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">object</span> <span class=\"nc\">CombineAllCredit</span> <span class=\"k\">extends</span> <span class=\"nc\">Semigroup</span><span class=\"o\">[</span><span class=\"kt\">Transaction</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Credit</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Credit</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">amount</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>Similarly we can find out total amount debited in the person account.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">object</span> <span class=\"nc\">CombineAllDebit</span> <span class=\"k\">extends</span> <span class=\"nc\">Semigroup</span><span class=\"o\">[</span><span class=\"kt\">Transaction</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Debit</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Debit</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">amount</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>What if we want to find the final balance available to person account.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">object</span> <span class=\"nc\">Finalbalance</span> <span class=\"k\">extends</span> <span class=\"nc\">Semigroup</span><span class=\"o\">[</span><span class=\"kt\">Transaction</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Debit</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">amount</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Credit</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">amount</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>Now we can provide a service to print the report.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">object</span> <span class=\"nc\">reportSevice</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">report</span><span class=\"o\">(</span><span class=\"n\">transactions</span><span class=\"k\">:</span> <span class=\"kt\">Seq</span><span class=\"o\">[</span><span class=\"kt\">Transaction</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"n\">totalCredit</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">transactions</span><span class=\"o\">.</span><span class=\"n\">reduceLeft</span><span class=\"o\">(</span><span class=\"nc\">CombineAllCredit</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"n\">totalDebit</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">transactions</span><span class=\"o\">.</span><span class=\"n\">reduceLeft</span><span class=\"o\">(</span><span class=\"nc\">CombineAllDebit</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"n\">finalbalance</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">transactions</span><span class=\"o\">.</span><span class=\"n\">reduceLeft</span><span class=\"o\">(</span><span class=\"nc\">Finalbalance</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">)</span>\n    <span class=\"n\">s</span><span class=\"s\">\"Total Credit is $totalCredit and total debit is $totalDebit and final Balance is $finalbalance\"</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>Just create a list of transactions and see the report!</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">val</span> <span class=\"n\">transactions</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span>\n    <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Credit</span><span class=\"o\">,</span> <span class=\"mf\">200.0</span><span class=\"o\">),</span>\n    <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Debit</span><span class=\"o\">,</span> <span class=\"mf\">50.0</span><span class=\"o\">),</span>\n    <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Credit</span><span class=\"o\">,</span> <span class=\"mf\">300.0</span><span class=\"o\">),</span>\n    <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Debit</span><span class=\"o\">,</span> <span class=\"mf\">100.0</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">reportSevice</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"o\">(</span><span class=\"n\">transactions</span><span class=\"o\">))</span></code></pre></figure>\n\n<p>Code can be accessed through <a href=\"https://github.com/scalamill/cats-in-practice/blob/master/src/main/scala/com/scalamill/meow/SemiGroup.scala\">repo</a></p>\n",
      
      "tags":  [ "scala,","akka,","java,","lagom,","spark" ],
      
      "date_published": "2018-09-15T18:30:51+05:30",
      "date_modified": "2018-09-15T18:30:51+05:30"
    },

    {
      "id": "/functional/programming/scala/2018/09/15/understanding-monoids-using-cats-in-scala",
      "url": "/functional/programming/scala/2018/09/15/understanding-monoids-using-cats-in-scala.html?utm_source=jsonFeed&amp;utm_medium=jsonFeed&amp;utm_campaign=UnderstandingmonoidsusingCatsinScala",
      "title": "Understanding monoids using Cats in Scala",
      "content_html": "<p>In the previous post we learned about Semigroup, In this post, we will see what are Monoids and how to use them.</p>\n\n<p><strong>What is Monoid</strong></p>\n\n<p>Wikipedia says In abstract algebra, a branch of mathematics, a monoid is an algebraic structure with a single associative binary operation and an identity element. We saw from the previous post on Semigroup that Semigroup also has a single associative operation. So monoids are similar to Semigroup but it has an identity element and a monoid definition in Scala look like as below. Here empty method refers to identity element.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">trait</span> <span class=\"nc\">Monoid</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span>\n<span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">empty</span><span class=\"k\">:</span> <span class=\"kt\">A</span>\n  <span class=\"k\">def</span> <span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span><span class=\"kt\">A</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">A</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>A Monoid has the same operation as we have with Semigroup and if we have a Semigroup available for a particular datatype we can rewrite monoid definition as below.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">trait</span> <span class=\"nc\">Semigroup</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">A</span>\n<span class=\"o\">}</span>\n<span class=\"k\">trait</span> <span class=\"nc\">Monoid</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"nc\">extends</span> <span class=\"nc\">Semigroup</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">empty</span><span class=\"k\">:</span> <span class=\"kt\">A</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>In cats, we already have monoid inbuilt for some datatypes. First, add cats to your SBT project.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"n\">libraryDependencies</span> <span class=\"o\">+=</span> <span class=\"s\">\"org.typelevel\"</span> <span class=\"o\">%%</span> <span class=\"s\">\"cats-core\"</span> <span class=\"o\">%</span> <span class=\"s\">\"1.2.0\"</span></code></pre></figure>\n\n<p>As usual, we need to add below cats imports to work with a monoid</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">import</span> <span class=\"nn\">cats.Monoid</span>\n<span class=\"k\">import</span> <span class=\"nn\">cats.implicits._</span></code></pre></figure>\n\n<p>Monoid instance for primitive types are already available in cats and can be used as below. Monoid has an identity element by definition and if you will combine another operand with it you will get the same as you can see in below code.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">val</span> <span class=\"n\">intMonoid</span> <span class=\"k\">=</span> <span class=\"nc\">Monoid</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span>\n<span class=\"k\">val</span> <span class=\"n\">strMonoid</span> <span class=\"k\">=</span> <span class=\"nc\">Monoid</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span>\n<span class=\"k\">val</span> <span class=\"n\">listMonoid</span> <span class=\"k\">=</span> <span class=\"nc\">Monoid</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]</span>\n\n<span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">intMonoid</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">strMonoid</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"s\">\"Hello \"</span><span class=\"o\">,</span> <span class=\"s\">\"World\"</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"s\">\"Hello World\"</span><span class=\"o\">)</span>\n<span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">listMonoid</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">))</span> <span class=\"o\">==</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">))</span>\n\n<span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">intMonoid</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">intMonoid</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">strMonoid</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"s\">\"Hello World\"</span><span class=\"o\">,</span> <span class=\"n\">strMonoid</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"s\">\"Hello World\"</span><span class=\"o\">)</span>\n<span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">listMonoid</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">listMonoid</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">))</span></code></pre></figure>\n\n<p>In the previous post on Semigroup, we demonstrate a banking transaction App to combine the credit, debit and final balance using reduceLeft. But what will happen if we find that there are no transactions in personal account then what we will return a result? Here monoid can solve our problem as it has an identity element.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">object</span> <span class=\"nc\">TransactionType</span> <span class=\"k\">extends</span> <span class=\"nc\">Enumeration</span> <span class=\"o\">{</span>\n  <span class=\"k\">type</span> <span class=\"kt\">TRANSXN</span> <span class=\"o\">=</span> <span class=\"nc\">Value</span>\n  <span class=\"k\">val</span> <span class=\"nc\">CREDIT</span> <span class=\"k\">=</span> <span class=\"nc\">Value</span><span class=\"o\">(</span><span class=\"s\">\"Credit\"</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"nc\">DEBIT</span> <span class=\"k\">=</span> <span class=\"nc\">Value</span><span class=\"o\">(</span><span class=\"s\">\"Debit\"</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"nc\">INVALID_OR_NO_TRANSACTION</span> <span class=\"k\">=</span> <span class=\"nc\">Value</span><span class=\"o\">(</span><span class=\"s\">\"InvalidOrNoTransaction\"</span><span class=\"o\">)</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>Create a case class to represent the transaction class.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"n\">transactionType</span><span class=\"k\">:</span> <span class=\"kt\">TransactionType.TRANSXN</span><span class=\"o\">,</span> <span class=\"n\">amount</span><span class=\"k\">:</span> <span class=\"kt\">Double</span><span class=\"o\">)</span></code></pre></figure>\n\n<p>Now write monoids to combine all credit, debit and calculate final balance.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">object</span> <span class=\"nc\">CombineAllCredit</span> <span class=\"k\">extends</span> <span class=\"nc\">Monoid</span><span class=\"o\">[</span><span class=\"kt\">Transaction</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">empty</span> <span class=\"k\">=</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">INVALID_OR_NO_TRANSACTION</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>  \n\n   <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">CREDIT</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">transactionType</span> <span class=\"k\">=</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">CREDIT</span><span class=\"o\">,</span> <span class=\"n\">amount</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">amount</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">CombineAllDebit</span> <span class=\"k\">extends</span> <span class=\"nc\">Monoid</span><span class=\"o\">[</span><span class=\"kt\">Transaction</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">empty</span> <span class=\"k\">=</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">INVALID_OR_NO_TRANSACTION</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>  \n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">DEBIT</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">transactionType</span> <span class=\"k\">=</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">DEBIT</span><span class=\"o\">,</span> <span class=\"n\">amount</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">amount</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Finalbalance</span> <span class=\"k\">extends</span> <span class=\"nc\">Monoid</span><span class=\"o\">[</span><span class=\"kt\">Transaction</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">empty</span> <span class=\"k\">=</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">INVALID_OR_NO_TRANSACTION</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>  \n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">DEBIT</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">amount</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">CREDIT</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">amount</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>Now we can create a function to generate the final report. In case of the no transaction if we use reduceLeft we will get a java.lang.UnsupportedOperationException: empty.reduceLeft but we will use foldleft and return an identity element as we have a monoid instance.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">object</span> <span class=\"nc\">reportSevice</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">report</span><span class=\"o\">(</span><span class=\"n\">transactions</span><span class=\"k\">:</span> <span class=\"kt\">Seq</span><span class=\"o\">[</span><span class=\"kt\">Transaction</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">CREDIT</span><span class=\"o\">,</span> <span class=\"n\">totalCredit</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">transactions</span><span class=\"o\">.</span><span class=\"n\">foldLeft</span><span class=\"o\">(</span><span class=\"nc\">CombineAllCredit</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"o\">)(</span><span class=\"nc\">CombineAllCredit</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">DEBIT</span><span class=\"o\">,</span> <span class=\"n\">totalDebit</span><span class=\"o\">)</span>  <span class=\"k\">=</span>  <span class=\"n\">transactions</span><span class=\"o\">.</span><span class=\"n\">foldLeft</span><span class=\"o\">(</span><span class=\"nc\">CombineAllDebit</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"o\">)(</span><span class=\"nc\">CombineAllDebit</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"n\">finalbalance</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">transactions</span><span class=\"o\">.</span><span class=\"n\">foldLeft</span><span class=\"o\">(</span><span class=\"nc\">Finalbalance</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"o\">)(</span><span class=\"nc\">Finalbalance</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">)</span>\n    <span class=\"n\">s</span><span class=\"s\">\"Total Credit is $totalCredit and total debit is $totalDebit and final Balance is $finalbalance\"</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>Now create some transactions and see the output.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">val</span> <span class=\"n\">transactions</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span>\n  <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">INVALID_OR_NO_TRANSACTION</span><span class=\"o\">,</span> <span class=\"mf\">40.0</span><span class=\"o\">),</span>\n  <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">CREDIT</span><span class=\"o\">,</span> <span class=\"mf\">200.0</span><span class=\"o\">),</span>\n  <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">INVALID_OR_NO_TRANSACTION</span><span class=\"o\">,</span> <span class=\"mf\">50.0</span><span class=\"o\">),</span>\n  <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">DEBIT</span><span class=\"o\">,</span> <span class=\"mf\">50.0</span><span class=\"o\">),</span>\n  <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">CREDIT</span><span class=\"o\">,</span> <span class=\"mf\">300.0</span><span class=\"o\">),</span>\n  <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">DEBIT</span><span class=\"o\">,</span> <span class=\"mf\">100.0</span><span class=\"o\">),</span>\n  <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">INVALID_OR_NO_TRANSACTION</span><span class=\"o\">,</span> <span class=\"mf\">25.0</span><span class=\"o\">)</span>\n<span class=\"o\">)</span>\n <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">reportSevice</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"o\">(</span><span class=\"n\">transactions</span><span class=\"o\">))</span>\n </code></pre></figure>\n\n<p>Please find the code through <a href=\"https://github.com/scalamill/cats-in-practice/blob/master/src/main/scala/com/scalamill/meow/Monoid.scala\">repo</a></p>\n",
      
      "tags":  [ "scala,","akka,","java,","lagom,","spark" ],
      
      "date_published": "2018-09-15T18:30:51+05:30",
      "date_modified": "2018-09-15T18:30:51+05:30"
    }

  ]
}
