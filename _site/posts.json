{
  "version": "https://jsonfeed.org/version/1",
  "title": null,
  "home_page_url": "/",
  "feed_url": "/feed.json",
  "description": null,
  "favicon": "/assets/icons/favicon-96x96.png",
  "icon": "/assets/icons/apple-touch-icon.png",
  "author": {
      "name": null,
      "url": "/",
  },
  "expired": "false",
  "items": [

    {
      "id": "/functional/programming/scala/2018/09/15/understanding-functor-via-cats-in-scala",
      "url": "/functional/programming/scala/2018/09/15/understanding-functor-via-cats-in-scala.html?utm_source=jsonFeed&amp;utm_medium=jsonFeed&amp;utm_campaign=Understandingfunctorviacatsinscala",
      "title": "Understanding functor via cats in scala",
      "content_html": "<p>In previous posts we learned something about Semigroup and Monoid in Cats. Now we will look into a Fucntor.</p>\n\n<p><strong>What is a Functor.</strong></p>\n\n<p>According to Wikipedia: In <a title=\"Mathematics\" href=\"https://en.wikipedia.org/wiki/Mathematics\">mathematics</a>, a <b>functor</b> is a map between <a title=\"Category (mathematics)\" href=\"https://en.wikipedia.org/wiki/Category_(mathematics)\">categories</a>. Functors were first considered in <a title=\"Algebraic topology\" href=\"https://en.wikipedia.org/wiki/Algebraic_topology\">algebraic topology</a>, where algebraic objects (such as the <a title=\"Fundamental group\" href=\"https://en.wikipedia.org/wiki/Fundamental_group\">fundamental group</a>) are associated to <a title=\"Topological space\" href=\"https://en.wikipedia.org/wiki/Topological_space\">topological spaces</a>, and maps between these algebraic objects are associated to <a title=\"Continuous function\" href=\"https://en.wikipedia.org/wiki/Continuous_function\">continuous</a> maps between spaces. Nowadays, functors are used throughout modern mathematics to relate various categories. Thus, functors are important in all areas within mathematics to which <a title=\"Category theory\" href=\"https://en.wikipedia.org/wiki/Category_theory\">category theory</a> is applied.</p>\n\n<p>Looks strange and hard to Understand but yes Functor maps between these algebraic objects. Functor basically unwraps a object out of a context and let’s you map the object via a function to the other object in the same context.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">trait</span> <span class=\"nc\">Functor</span><span class=\"o\">[</span><span class=\"kt\">F</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">map</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">fa</span><span class=\"k\">:</span> <span class=\"kt\">F</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">F</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>In the above definition <strong>F</strong> is type of the context, container or type of the Kind. It could be list, option or your custom kind types. <strong>fa</strong> is a value of kind type which contains the values of datatype <strong>A</strong>. <strong>f</strong> is a function which will transform each value inside a context into a type <strong>B</strong>. <strong>F[B]</strong> will be the context/collection of datatype <strong>B</strong>.</p>\n\n<p>In order to use them with cats we need to import below statements.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">import</span> <span class=\"nn\">cats.Functor</span>\n<span class=\"k\">import</span> <span class=\"nn\">cats.instances.list._</span>\n<span class=\"k\">import</span> <span class=\"nn\">cats.instances.option._</span></code></pre></figure>\n\n<p>Cats have functors available for some datatype list, option and their are ways to compose functor together as you see in below examples. As per the Functor\ndefinition it is unwrapping the element from the context(option, list, listOption)</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">val</span> <span class=\"n\">option</span> <span class=\"k\">=</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">list</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">listOption</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"nc\">Option</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"nc\">Option</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"nc\">Option</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">))</span>\n<span class=\"n\">println</span><span class=\"o\">(</span><span class=\"nc\">Functor</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">].</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">option</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">println</span><span class=\"o\">(</span><span class=\"nc\">Functor</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">].</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> \n<span class=\"n\">println</span><span class=\"o\">(</span><span class=\"nc\">Functor</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">].</span><span class=\"n\">compose</span><span class=\"o\">[</span><span class=\"kt\">Option</span><span class=\"o\">].</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">listOption</span><span class=\"o\">)(</span><span class=\"k\">_</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span></code></pre></figure>\n\n<p>Again we will unsdertand functor in context of banking domain. Bank usually have certain constraints over bank balance, based on that they can take actions on person’s account. Like if balance is below a certain amount then they can convert to some other account type or if balance is above a certain amount they can change account type and also can award some more money on top of current balance. First we will create various account type object and bank account case class as below.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">BankAccount</span><span class=\"o\">[</span><span class=\"kt\">T</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">AccountType</span><span class=\"o\">](</span><span class=\"n\">accountType</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">,</span> <span class=\"n\">balance</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">status</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">)</span>\n\n<span class=\"k\">abstract</span> <span class=\"k\">class</span> <span class=\"nc\">AccountType</span>\n<span class=\"k\">class</span> <span class=\"nc\">SavingsAccount</span> <span class=\"k\">extends</span> <span class=\"nc\">AccountType</span>\n<span class=\"k\">class</span> <span class=\"nc\">SalaryAccount</span> <span class=\"k\">extends</span> <span class=\"nc\">AccountType</span>\n<span class=\"k\">class</span> <span class=\"nc\">CurrentAccount</span> <span class=\"k\">extends</span> <span class=\"nc\">AccountType</span>\n<span class=\"k\">class</span> <span class=\"nc\">SomeOtherAccount</span> <span class=\"k\">extends</span> <span class=\"nc\">AccountType</span></code></pre></figure>\n\n<p>Now our task is to build some mechanism to convert account of one type to some other type. As you can see from above defintion of the functor that a functor takes a collection of datatype <strong>F[A]</strong> which is <strong>BankAccount</strong> in our case. <strong>A</strong> and <strong>B</strong> are Account type and again <strong>F[B]</strong> is a <strong>BankAccount</strong>. Here F is collection type but we see <strong>BankAccount</strong> is not a collection, so what we have <strong>Option</strong> which is not a collection but it has a corresponding functors. Simlarly <strong>Option</strong> is a container for any datatype, we have <strong>BankAccount</strong> as a container for <strong>AccountType</strong>.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">object</span> <span class=\"nc\">BankAccountFunctor</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">map</span><span class=\"o\">[</span><span class=\"kt\">A</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">AccountType</span>, <span class=\"kt\">B</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">AccountType</span><span class=\"o\">](</span><span class=\"n\">fa</span><span class=\"k\">:</span> <span class=\"kt\">BankAccount</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">BankAccount</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"k\">=</span> \n  <span class=\"n\">fa</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">accountType</span> <span class=\"k\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">fa</span><span class=\"o\">.</span><span class=\"n\">accountType</span><span class=\"o\">))</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>Now We will create a list of BankAccounts and see how functor works on them. Below we have some accounts and we are checking each and every account balance and converting them to appropriate type.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">val</span> <span class=\"n\">bankAccount1</span> <span class=\"k\">=</span> <span class=\"nc\">BankAccount</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">SalaryAccount</span><span class=\"o\">,</span> <span class=\"mi\">15000</span><span class=\"o\">,</span><span class=\"s\">\"Running\"</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">bankAccount2</span> <span class=\"k\">=</span> <span class=\"nc\">BankAccount</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">CurrentAccount</span><span class=\"o\">,</span> <span class=\"mi\">4000</span> <span class=\"o\">,</span> <span class=\"s\">\"Running\"</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">bankAccount3</span> <span class=\"k\">=</span> <span class=\"nc\">BankAccount</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">SalaryAccount</span><span class=\"o\">,</span> <span class=\"mi\">60000</span><span class=\"o\">,</span> <span class=\"s\">\"Running\"</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">list</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"n\">bankAccount1</span><span class=\"o\">,</span> <span class=\"n\">bankAccount2</span><span class=\"o\">,</span> <span class=\"n\">bankAccount3</span><span class=\"o\">)</span></code></pre></figure>\n\n<ol>\n  <li>Convert bankAccount2 to SalaryAccount.</li>\n</ol>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"n\">println</span><span class=\"o\">(</span><span class=\"nc\">BankAccountFunctor</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">bankAccount1</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">SalaryAccount</span><span class=\"o\">))</span></code></pre></figure>\n\n<ol>\n  <li>Convert All Accounts to CurrentAccount.</li>\n</ol>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">BankAccountFunctor</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">CurrentAccount</span><span class=\"o\">)))</span></code></pre></figure>\n\n<ol>\n  <li>Convert to savings account if balance is below <strong>5000</strong> and make the balance zero and close the account :-(</li>\n</ol>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"n\">println</span><span class=\"o\">(</span><span class=\"k\">for</span> <span class=\"o\">{</span>\n    <span class=\"n\">bankAccount</span> <span class=\"k\">&lt;-</span> <span class=\"n\">list</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bankAccount</span><span class=\"o\">.</span><span class=\"n\">balance</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5000</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span> <span class=\"k\">yield</span> <span class=\"nc\">BankAccountFunctor</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">bankAccount</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">SavingsAccount</span><span class=\"o\">).</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">balance</span> <span class=\"k\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">status</span> <span class=\"k\">=</span>  <span class=\"s\">\"closed\"</span><span class=\"o\">))</span></code></pre></figure>\n\n<ol>\n  <li>Convert to savings account if balance is between <strong>5000</strong>  and <strong>20000</strong> and make the balance reduce by <strong>1000</strong> :-(</li>\n</ol>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"n\">println</span><span class=\"o\">(</span><span class=\"k\">for</span> <span class=\"o\">{</span>\n    <span class=\"n\">bankAccount</span> <span class=\"k\">&lt;-</span> <span class=\"n\">list2</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bankAccount</span><span class=\"o\">.</span><span class=\"n\">balance</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">20000</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">bankAccount</span><span class=\"o\">.</span><span class=\"n\">balance</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">5000</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span> <span class=\"nc\">BankAccountFunctor</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">bankAccount</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">SavingsAccount</span><span class=\"o\">).</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">balance</span> <span class=\"k\">=</span> <span class=\"n\">bankAccount</span><span class=\"o\">.</span><span class=\"n\">balance</span> <span class=\"o\">-</span> <span class=\"mi\">1000</span><span class=\"o\">))</span></code></pre></figure>\n\n<ol>\n  <li>Convert to current account if balance is above <strong>50000</strong> and award some <strong>5000</strong> money beacuse person maintain huge money in account :-)</li>\n</ol>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"n\">println</span><span class=\"o\">(</span><span class=\"k\">for</span> <span class=\"o\">{</span>\n    <span class=\"n\">bankAccount</span> <span class=\"k\">&lt;-</span> <span class=\"n\">list2</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bankAccount</span><span class=\"o\">.</span><span class=\"n\">balance</span> <span class=\"o\">&gt;</span> <span class=\"mi\">50000</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span> <span class=\"k\">yield</span> <span class=\"nc\">BankAccountFunctor</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"n\">bankAccount</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"k\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nc\">CurrentAccount</span><span class=\"o\">).</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">balance</span> <span class=\"k\">=</span> <span class=\"n\">bankAccount</span><span class=\"o\">.</span><span class=\"n\">balance</span> <span class=\"o\">+</span> <span class=\"mi\">5000</span><span class=\"o\">))</span></code></pre></figure>\n\n<p>Thus we have seen that Functor is a abstraction over kind types to map them between each other, the kind type could be anything, it could be a elementary type or it could be a colection or it could be a container like Option and BankAccount. Hope you will find all this helpful if you are learning scala or any other functional programming language. You can find the code <a href=\"https://github.com/scalamill/cats-in-practice/blob/master/src/main/scala/com/scalamill/meow/Functor.scala\">here</a>. Let us know your opinion in comment box.</p>\n",
      
      "tags":  [ "scala,","cats,","functor" ],
      
      "date_published": "2018-09-15T22:05:47+05:30",
      "date_modified": "2018-09-15T22:05:47+05:30"
    },

    {
      "id": "/functional/programming/scala/2018/09/15/understanding-semigroup-via-cats-in-scala",
      "url": "/functional/programming/scala/2018/09/15/understanding-semigroup-via-cats-in-scala.html?utm_source=jsonFeed&amp;utm_medium=jsonFeed&amp;utm_campaign=UnderstandingSemigroupviaCatsinScala",
      "title": "Understanding Semigroup via Cats in Scala",
      "content_html": "<p>Hi All, Scala now is a most widely used language for enterprises and if you are Scala Programmer then you are also using it in your daily life. Ever wondered how Scala library collections share the same algebra. We can use map, flatMap, reduceLeft, foldLeft functions for any kind of the collection if we know how a particular algebraic datatype in that collection behaves. We will understand these things via Cats.</p>\n\n<p><strong>What is Cats.</strong></p>\n\n<p>Cats is the library written in Scala to teach you the functional design patterns in a functional programming. Cats not only provides a solid understanding of Monad, Monoid, Functor, Applicative functor in category theory but also let’s you create abstractions for your datatypes .</p>\n\n<p>Add Cats to your sbt project</p>\n\n<p>libraryDependencies += “org.typelevel” %% “cats-core” % “1.2.0”\nThere are various datatype is cats and we will explore one of them in this post.</p>\n\n<p><strong>SemiGroup</strong></p>\n\n<p>Semigroup is a discrete mathematics concept(Wikipedia In mathematics, a semigroup is an algebraic structure consisting of a set together with an associative binary operation. ). Coming to functional programming a Semigroup over a datatype is defined as a single associative operation which takes two values of same type and return you the same datatype.</p>\n\n<p>To work with cats we need to import basic imports as below.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">import</span> <span class=\"nn\">cats.Semigroup</span>\n<span class=\"k\">import</span> <span class=\"nn\">cats.implicits._</span></code></pre></figure>\n\n<p>A semigroup over some datatypes is already inbuilt and they can be used as below.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">val</span> <span class=\"n\">intSemiGroup</span> <span class=\"k\">=</span> <span class=\"nc\">Semigroup</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span>\n<span class=\"k\">val</span> <span class=\"n\">stringSemiGroup</span> <span class=\"k\">=</span> <span class=\"nc\">Semigroup</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span>\n<span class=\"k\">val</span> <span class=\"n\">listSemiGroup</span> <span class=\"k\">=</span> <span class=\"nc\">Semigroup</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]</span>\n\n<span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">intSemiGroup</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">stringSemiGroup</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"s\">\"Hello\"</span><span class=\"o\">,</span> <span class=\"s\">\" World\"</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"s\">\"Hello World\"</span><span class=\"o\">)</span>\n<span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">listSemiGroup</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">))</span> <span class=\"o\">==</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">))</span></code></pre></figure>\n\n<p>Let’s Understand Semigroup by building a Banking Transaction App.Create a TransactionType Enum to differentiate between Credit and debit transaction.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"> <span class=\"k\">object</span> <span class=\"nc\">TransactionType</span> <span class=\"k\">extends</span> <span class=\"nc\">Enumeration</span> <span class=\"o\">{</span>\n    <span class=\"k\">type</span> <span class=\"kt\">TRANSXN</span> <span class=\"o\">=</span> <span class=\"nc\">Value</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Credit</span> <span class=\"k\">=</span> <span class=\"nc\">Value</span><span class=\"o\">(</span><span class=\"s\">\"Credit\"</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Debit</span> <span class=\"k\">=</span> <span class=\"nc\">Value</span><span class=\"o\">(</span><span class=\"s\">\"Debit\"</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span></code></pre></figure>\n\n<p>Define a transaction as a case class.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"n\">transactionType</span><span class=\"k\">:</span> <span class=\"kt\">TransactionType.TRANSXN</span><span class=\"o\">,</span> <span class=\"n\">amount</span><span class=\"k\">:</span> <span class=\"kt\">Double</span><span class=\"o\">)</span></code></pre></figure>\n\n<p>Now we can define different semigroup as per the requirement. Like we need total amount credited in the person account.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">object</span> <span class=\"nc\">CombineAllCredit</span> <span class=\"k\">extends</span> <span class=\"nc\">Semigroup</span><span class=\"o\">[</span><span class=\"kt\">Transaction</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Credit</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Credit</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">amount</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>Similarly we can find out total amount debited in the person account.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">object</span> <span class=\"nc\">CombineAllDebit</span> <span class=\"k\">extends</span> <span class=\"nc\">Semigroup</span><span class=\"o\">[</span><span class=\"kt\">Transaction</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Debit</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Debit</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">amount</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>What if we want to find the final balance available to person account.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">object</span> <span class=\"nc\">Finalbalance</span> <span class=\"k\">extends</span> <span class=\"nc\">Semigroup</span><span class=\"o\">[</span><span class=\"kt\">Transaction</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Debit</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">amount</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Credit</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">amount</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>Now we can provide a service to print the report.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">object</span> <span class=\"nc\">reportSevice</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">report</span><span class=\"o\">(</span><span class=\"n\">transactions</span><span class=\"k\">:</span> <span class=\"kt\">Seq</span><span class=\"o\">[</span><span class=\"kt\">Transaction</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"n\">totalCredit</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">transactions</span><span class=\"o\">.</span><span class=\"n\">reduceLeft</span><span class=\"o\">(</span><span class=\"nc\">CombineAllCredit</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"n\">totalDebit</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">transactions</span><span class=\"o\">.</span><span class=\"n\">reduceLeft</span><span class=\"o\">(</span><span class=\"nc\">CombineAllDebit</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"n\">finalbalance</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">transactions</span><span class=\"o\">.</span><span class=\"n\">reduceLeft</span><span class=\"o\">(</span><span class=\"nc\">Finalbalance</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">)</span>\n    <span class=\"n\">s</span><span class=\"s\">\"Total Credit is $totalCredit and total debit is $totalDebit and final Balance is $finalbalance\"</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>Just create a list of transactions and see the report!</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">val</span> <span class=\"n\">transactions</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span>\n    <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Credit</span><span class=\"o\">,</span> <span class=\"mf\">200.0</span><span class=\"o\">),</span>\n    <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Debit</span><span class=\"o\">,</span> <span class=\"mf\">50.0</span><span class=\"o\">),</span>\n    <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Credit</span><span class=\"o\">,</span> <span class=\"mf\">300.0</span><span class=\"o\">),</span>\n    <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">Debit</span><span class=\"o\">,</span> <span class=\"mf\">100.0</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n\n  <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">reportSevice</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"o\">(</span><span class=\"n\">transactions</span><span class=\"o\">))</span></code></pre></figure>\n\n<p>Code can be accessed through <a href=\"https://github.com/scalamill/cats-in-practice/blob/master/src/main/scala/com/scalamill/meow/SemiGroup.scala\">repo</a></p>\n",
      
      "tags":  [ "scala,","akka,","java,","lagom,","spark" ],
      
      "date_published": "2018-09-15T18:30:51+05:30",
      "date_modified": "2018-09-15T18:30:51+05:30"
    },

    {
      "id": "/functional/programming/scala/2018/09/15/understanding-monoids-using-cats-in-scala",
      "url": "/functional/programming/scala/2018/09/15/understanding-monoids-using-cats-in-scala.html?utm_source=jsonFeed&amp;utm_medium=jsonFeed&amp;utm_campaign=UnderstandingmonoidsusingCatsinScala",
      "title": "Understanding monoids using Cats in Scala",
      "content_html": "<p>In the previous post we learned about Semigroup, In this post, we will see what are Monoids and how to use them.</p>\n\n<p><strong>What is Monoid</strong></p>\n\n<p>Wikipedia says In abstract algebra, a branch of mathematics, a monoid is an algebraic structure with a single associative binary operation and an identity element. We saw from the previous post on Semigroup that Semigroup also has a single associative operation. So monoids are similar to Semigroup but it has an identity element and a monoid definition in Scala look like as below. Here empty method refers to identity element.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">trait</span> <span class=\"nc\">Monoid</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span>\n<span class=\"o\">{</span>\n  <span class=\"k\">val</span> <span class=\"n\">empty</span><span class=\"k\">:</span> <span class=\"kt\">A</span>\n  <span class=\"k\">def</span> <span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span><span class=\"kt\">A</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">A</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>A Monoid has the same operation as we have with Semigroup and if we have a Semigroup available for a particular datatype we can rewrite monoid definition as below.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">trait</span> <span class=\"nc\">Semigroup</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">A</span>\n<span class=\"o\">}</span>\n<span class=\"k\">trait</span> <span class=\"nc\">Monoid</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"nc\">extends</span> <span class=\"nc\">Semigroup</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">empty</span><span class=\"k\">:</span> <span class=\"kt\">A</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>In cats, we already have monoid inbuilt for some datatypes. First, add cats to your SBT project.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"n\">libraryDependencies</span> <span class=\"o\">+=</span> <span class=\"s\">\"org.typelevel\"</span> <span class=\"o\">%%</span> <span class=\"s\">\"cats-core\"</span> <span class=\"o\">%</span> <span class=\"s\">\"1.2.0\"</span></code></pre></figure>\n\n<p>As usual, we need to add below cats imports to work with a monoid</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">import</span> <span class=\"nn\">cats.Monoid</span>\n<span class=\"k\">import</span> <span class=\"nn\">cats.implicits._</span></code></pre></figure>\n\n<p>Monoid instance for primitive types are already available in cats and can be used as below. Monoid has an identity element by definition and if you will combine another operand with it you will get the same as you can see in below code.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">val</span> <span class=\"n\">intMonoid</span> <span class=\"k\">=</span> <span class=\"nc\">Monoid</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]</span>\n<span class=\"k\">val</span> <span class=\"n\">strMonoid</span> <span class=\"k\">=</span> <span class=\"nc\">Monoid</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span>\n<span class=\"k\">val</span> <span class=\"n\">listMonoid</span> <span class=\"k\">=</span> <span class=\"nc\">Monoid</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]]</span>\n\n<span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">intMonoid</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">strMonoid</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"s\">\"Hello \"</span><span class=\"o\">,</span> <span class=\"s\">\"World\"</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"s\">\"Hello World\"</span><span class=\"o\">)</span>\n<span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">listMonoid</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">))</span> <span class=\"o\">==</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">))</span>\n\n<span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">intMonoid</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">intMonoid</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">strMonoid</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"s\">\"Hello World\"</span><span class=\"o\">,</span> <span class=\"n\">strMonoid</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"s\">\"Hello World\"</span><span class=\"o\">)</span>\n<span class=\"n\">assert</span><span class=\"o\">(</span><span class=\"n\">listMonoid</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">listMonoid</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">))</span></code></pre></figure>\n\n<p>In the previous post on Semigroup, we demonstrate a banking transaction App to combine the credit, debit and final balance using reduceLeft. But what will happen if we find that there are no transactions in personal account then what we will return a result? Here monoid can solve our problem as it has an identity element.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">object</span> <span class=\"nc\">TransactionType</span> <span class=\"k\">extends</span> <span class=\"nc\">Enumeration</span> <span class=\"o\">{</span>\n  <span class=\"k\">type</span> <span class=\"kt\">TRANSXN</span> <span class=\"o\">=</span> <span class=\"nc\">Value</span>\n  <span class=\"k\">val</span> <span class=\"nc\">CREDIT</span> <span class=\"k\">=</span> <span class=\"nc\">Value</span><span class=\"o\">(</span><span class=\"s\">\"Credit\"</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"nc\">DEBIT</span> <span class=\"k\">=</span> <span class=\"nc\">Value</span><span class=\"o\">(</span><span class=\"s\">\"Debit\"</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"nc\">INVALID_OR_NO_TRANSACTION</span> <span class=\"k\">=</span> <span class=\"nc\">Value</span><span class=\"o\">(</span><span class=\"s\">\"InvalidOrNoTransaction\"</span><span class=\"o\">)</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>Create a case class to represent the transaction class.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"n\">transactionType</span><span class=\"k\">:</span> <span class=\"kt\">TransactionType.TRANSXN</span><span class=\"o\">,</span> <span class=\"n\">amount</span><span class=\"k\">:</span> <span class=\"kt\">Double</span><span class=\"o\">)</span></code></pre></figure>\n\n<p>Now write monoids to combine all credit, debit and calculate final balance.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">object</span> <span class=\"nc\">CombineAllCredit</span> <span class=\"k\">extends</span> <span class=\"nc\">Monoid</span><span class=\"o\">[</span><span class=\"kt\">Transaction</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">empty</span> <span class=\"k\">=</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">INVALID_OR_NO_TRANSACTION</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>  \n\n   <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">CREDIT</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">transactionType</span> <span class=\"k\">=</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">CREDIT</span><span class=\"o\">,</span> <span class=\"n\">amount</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">amount</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">CombineAllDebit</span> <span class=\"k\">extends</span> <span class=\"nc\">Monoid</span><span class=\"o\">[</span><span class=\"kt\">Transaction</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">empty</span> <span class=\"k\">=</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">INVALID_OR_NO_TRANSACTION</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>  \n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">DEBIT</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">transactionType</span> <span class=\"k\">=</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">DEBIT</span><span class=\"o\">,</span> <span class=\"n\">amount</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">amount</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Finalbalance</span> <span class=\"k\">extends</span> <span class=\"nc\">Monoid</span><span class=\"o\">[</span><span class=\"kt\">Transaction</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">empty</span> <span class=\"k\">=</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">INVALID_OR_NO_TRANSACTION</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>  \n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">combine</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Transaction</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">DEBIT</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">amount</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">transactionType</span> <span class=\"o\">==</span> <span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">CREDIT</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"k\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">amount</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"n\">a</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>Now we can create a function to generate the final report. In case of the no transaction if we use reduceLeft we will get a java.lang.UnsupportedOperationException: empty.reduceLeft but we will use foldleft and return an identity element as we have a monoid instance.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">object</span> <span class=\"nc\">reportSevice</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">report</span><span class=\"o\">(</span><span class=\"n\">transactions</span><span class=\"k\">:</span> <span class=\"kt\">Seq</span><span class=\"o\">[</span><span class=\"kt\">Transaction</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">CREDIT</span><span class=\"o\">,</span> <span class=\"n\">totalCredit</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">transactions</span><span class=\"o\">.</span><span class=\"n\">foldLeft</span><span class=\"o\">(</span><span class=\"nc\">CombineAllCredit</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"o\">)(</span><span class=\"nc\">CombineAllCredit</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">DEBIT</span><span class=\"o\">,</span> <span class=\"n\">totalDebit</span><span class=\"o\">)</span>  <span class=\"k\">=</span>  <span class=\"n\">transactions</span><span class=\"o\">.</span><span class=\"n\">foldLeft</span><span class=\"o\">(</span><span class=\"nc\">CombineAllDebit</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"o\">)(</span><span class=\"nc\">CombineAllDebit</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"n\">finalbalance</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">transactions</span><span class=\"o\">.</span><span class=\"n\">foldLeft</span><span class=\"o\">(</span><span class=\"nc\">Finalbalance</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"o\">)(</span><span class=\"nc\">Finalbalance</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"o\">)</span>\n    <span class=\"n\">s</span><span class=\"s\">\"Total Credit is $totalCredit and total debit is $totalDebit and final Balance is $finalbalance\"</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></figure>\n\n<p>Now create some transactions and see the output.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-scala\" data-lang=\"scala\"><span class=\"k\">val</span> <span class=\"n\">transactions</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span>\n  <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">INVALID_OR_NO_TRANSACTION</span><span class=\"o\">,</span> <span class=\"mf\">40.0</span><span class=\"o\">),</span>\n  <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">CREDIT</span><span class=\"o\">,</span> <span class=\"mf\">200.0</span><span class=\"o\">),</span>\n  <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">INVALID_OR_NO_TRANSACTION</span><span class=\"o\">,</span> <span class=\"mf\">50.0</span><span class=\"o\">),</span>\n  <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">DEBIT</span><span class=\"o\">,</span> <span class=\"mf\">50.0</span><span class=\"o\">),</span>\n  <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">CREDIT</span><span class=\"o\">,</span> <span class=\"mf\">300.0</span><span class=\"o\">),</span>\n  <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">DEBIT</span><span class=\"o\">,</span> <span class=\"mf\">100.0</span><span class=\"o\">),</span>\n  <span class=\"nc\">Transaction</span><span class=\"o\">(</span><span class=\"nc\">TransactionType</span><span class=\"o\">.</span><span class=\"nc\">INVALID_OR_NO_TRANSACTION</span><span class=\"o\">,</span> <span class=\"mf\">25.0</span><span class=\"o\">)</span>\n<span class=\"o\">)</span>\n <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">reportSevice</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"o\">(</span><span class=\"n\">transactions</span><span class=\"o\">))</span>\n </code></pre></figure>\n\n<p>Please find the code through <a href=\"https://github.com/scalamill/cats-in-practice/blob/master/src/main/scala/com/scalamill/meow/Monoid.scala\">repo</a></p>\n",
      
      "tags":  [ "scala,","akka,","java,","lagom,","spark" ],
      
      "date_published": "2018-09-15T18:30:51+05:30",
      "date_modified": "2018-09-15T18:30:51+05:30"
    }

  ]
}
